skip
ski@
@plot
@plot.user
skip
@plot.user == current_user
skip
@plot.user == current_user
@plot.user
 redirect_to root_path unless @plot.user == current_user
skip
@a = @notifications.size == NotificationUser.where(user_id: current_user.id).count 
   10:
skip
@a = @notifications.size == NotificationUser.where(user_id: current_user.id).count
   10:     
skip
sきp
NotificationUser.find_by(user_id: current_user.id)
NotificationUser.find_by(user_id: current_user.id).count
skip
NotificationUser.find_by(user_id: current_user.id).count
.s
NotificationUser.find_by(user_id: current_user.id)
@notifications
@notifications.size
skip
sきp
skip
notification_user.present?
skip
skip@
current_user.id
skip
current_user.id
User.find(params[:id]).id
skip
User.find(params[:id])
User.find(params[:id]).id
@user_id
skip
unless notification.notification_users.exists?(user_id: user.id)
      byebug
      notification.notification_users.create(user: user)
    else
      p "a"
    end
 unless notification.notification_users.exists?(user_id: user.id)
      byebug
      notification.notification_users.create(user: user)
    end
if  notification.notification_users.exists?(user_id: user.id) end
 unless notification.notification_users.exists?(user_id: user.id) end
 unless notification.notification_users.exists?(user_id: user.id)
      byebug
      notification.notification_users.create(user: user)
    end
if  notification.notification_users.exists?(user_id: user.id) then unless notification.notification_users.exists?(user_id: user.id)
      byebug
      notification.notification_users.create(user: user)
    end
if  notification.notification_users.exists?(user_id: user.id) then
unless notification.notification_users.exists?(user_id: user.id) then
skip
if notification.notification_users.exists?(user_id: user.id)
unless notification.notification_users.exists?(user_id: user.id)
notification.notification_users.exists?(user_id: user.id)
unless notification.notification_users.exists?(user_id: user.id)
notification.notification_users.exists?(user_id: user.id)
skip
notification = Notification.find(@notification_id)
@notification_id = @notification.id
 notification
notification = Notification.find(@notification_id)
User.find(params[:id]).id
@notification
User.find(params[:id])
params[:user.id]
@notification.id
@notification
params[:user_id]
user_id
notification_id
skip
@notifications
@notification
<%= render partial: "shared/message", collection: @notifications %>
 notification<%= render partial: "shared/message", collection: @notifications %>
@notifications
@notification
@ notification
 notification
skip
@notification.title
@notification.message
@notification.name
@notification
skip
 flash.now[:danger]
skip
if @plot.save
      create_cards(@plot)
      redirect_to plot_path(@plot), success: "作成しました！"
    else
      flash.now[:danger] = "作成できませんでした。"
      render 'new'
      byebug
    end
if @plot.save end
if @plot.save
@plot = current_user.plots.build(plot_params)
@plot.save
skip
@cards_timelines
skip
 @cards_json_foreshadowing
@cards_timelines
@timelines
@cards_timelines.to_json
@cards_timelines.html_safe
@cards_timelines
skip
@cards_timelines.to_json
@cards_json
@cards_timelines.to_json
@cards_json_foreshadowing 
@cards_timelines
skip
card.body
timeline.body
@timelines
 @plot = Plot.find(params[:plot_id])
<%= render "timelines/timeline", collection: @timelines %>
@timeline
card.time
card
@timeline
@timelines
@timeline
timeline
timeline.time 
skip
@timelines.time
@timelines
@timeline
timeline
@timelines
skip
@plot.foreshadowings.joins(:card).select('cards.scene, foreshadowings.name').to_json
skip
@plot.foreshadowings.joins(:card)
 @plot.foreshadowings.joins(:card).select('foreshadowing_cards.*')
 @plot.foreshadowings.joins(:card).select('scene.*')
 @plot.foreshadowings.joins(:card).select('foreshadowing_cards.*')
@plot.foreshadowings.joins(:card)
@plot.foreshadowings
@plot.foreshadowings.joins(:card).select('foreshadowing_cards.*').to_json
skip
@plot.foreshadowings.joins(:card).select('foreshadowing_cards.*').to_json
@cards_json_foreshadowing
skip
@plot.foreshadowings.joins(:card).select('foreshadowing_cards.*').as_json
@cards_json_foreshadowing
skip
@plot.foreshadowings.joins(:card).select('foreshadowing_cards.*').as_json.as_json
@plot.foreshadowings.joins(:card).select('foreshadowing_cards.*').as_json.as_json(only: [:card_id, :foreshadowing_id])
@cards_json_foreshadowing
skip
@cards_json_foreshadowing = @plot.foreshadowings.joins(:card).select('foreshadowing_cards.*')
 @cards_json_foreshadowing
@plot.foreshadowings.joins(:card).select('foreshadowing_cards.*')
@cards_json_foreshadowing 
@plot.foreshadowings.joins(:card).select('foreshadowing_cards.*')
@plot.foreshadowings.joins(:card)
@cards_json_foreshadowing
skip
@plot.foreshadowings.joins(:card).select('foreshadowing_cards.*')
@plot.foreshadowings.joins(:card)
@plot.foreshadowings.joins(:cards)
@plot.foreshadowings
@plot.foreshadowings.joins(:cards).select('foreshadowing_cards.*')
@cards_json_foreshadowing
skip
ForeshadowingCard.all
ForeshadowingCard
@plot.foreshadowing_ids.cards
@plot.foreshadowing_ids.card
@plot.foreshadowing_ids
@plot.Foreshadowings
@plot.Foreshadowing
@plot
Foreshadowing
@foreshadowings
skip
@plot.ForeshadowingCard.all
ForeshadowingCard.all
ForeshadowingCard
 @plot
skip
card_params
skip
card_params
skip
card_params
c
skip
sきp
card_params
@card.update(card_params)
skip
@card = Card.find(params[:id])
@plot = @card.plot_id
skip
foreshadowing_ids
 Card.new(card_params)
foreshadowing_ids
card_params
sk
skip
redirect_to plot_cards_path(@card.plot)
@card.plot
@card.plot)
skip
Plot
params[:plot_id]
plot_url
plot_id
@plot = Plot.find(params[:plot_id])
skip
@card.update(card_update_params)
skip
card_params
@card.update(card_params)
 @card = Card.find(params[:id])
skip
@card.update(card_params)
@card = Card.find(params[:id])
skip
@card.update(card_params)
skip
@card.update(card_params)
@card = Card.find(params[:id])
@card = Card.find(params[:id])]
skip
sip
sspski
skp
kip
ppp
p
