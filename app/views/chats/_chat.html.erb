<% if logged_in? %>
<div id="ai-wrapper" class="fixed bottom-0 right-0 mb-12 mx-2 sm:m-12 z-20">
  <button id="ai-button" class="btn btn-circle">AI</button>
</div>


<div id="chat-log-wrapper" class="hidden fixed bottom-0 right-0 card overflow-auto bg-base-100 shadow-xl z-20 h-3/6 sm:h-5/6 max-w-md border-2 rounded-lg border-stone-800 mb-12 mx-2 sm:m-12">
  <div class="flex text-xl bg-neutral border-b border-gray-500 text-neutral-content backdrop-blur backdrop-brightness-50">
    <div class="flex-1 m-2">MidPlotAI ChatLog</div>
    <button id="close-button" class="flex-no btn btn-circle">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
    </button>
  </div>
  <div class="overflow-auto mb-3" id="chat-container" style="height: calc(100% - 160px);">
    <% if @chat_logs.present? %>
      <% @chat_logs.each do |log| %>
        <div class="chat chat-end">
        <div class="chat-header"><%= current_user.name %></div>
          <div class="chat-bubble chat-bubble-secondary text-xs"><%= log.input %></div>
        </div>
        <div class="chat chat-start">
          <div class="chat-image">
            <%= image_tag("booknekosan.png", width: '50px', height: '50px') %>
          </div>
          <div class="chat-header">MidPlotAI</div>
          <div class="chat-bubble chat-bubble-secondary text-xs"><%= log.output %></div>
        </div>
      <% end %>
    <% else %>
      <div class="chat chat-start">
        <div class="chat-image">
          <%= image_tag("booknekosan.png", width: '50px', height: '50px') %>
        </div>
        <div class="chat-header">MidPlotAI</div>
        <div class="chat-bubble chat-bubble-secondary text-xs">感情値について聞いてください。</div>
      </div>
    <% end %>
  </div>
  <div class="tabs flex">
    <a class="tab tab-lifted tab-active" id="emotional-value-tab">感情値</a> 
    <a class="tab tab-lifted" id="synonym-tab">言い換え</a>
    <a class="tab tab-lifted flex-grow" id="synonym-tab"></a>
  </div>
  <div id="synonym-form-container" class="hidden">
      <%= form_with(url: "#", method: "get", id: "synonym-form", local: true) do %>
      <div class="w-full flex m-2">
        <%= text_field_tag :Synonym, nil, class: "input input-bordered input-secondary flex-grow", placeholder: "言い換えたい文章を入力してください" %>
        <%= submit_tag "送信", class: 'btn mx-2 mr-5' %>
      </div>
      <% end %>
  </div>
  <div id="emotional-value-form-container">
    <%= form_with(url: "#", method: "get", id: "emotional-value-form", local: true) do %>
    <div class="w-full flex m-2">
      <%= text_field_tag :emotional_value, nil, class: "input input-bordered input-secondary flex-grow", placeholder: "感情値を知りたい文章を入力してください" %>
      <%= submit_tag "送信", class: 'btn mx-2 mr-5' %>
    </div>
    <% end %>
  </div>
</div>
<script>
//chat表示切り替え
function switchChat() {
  const aiWrapper = document.querySelector("#ai-wrapper");
  const chatLogWrapper = document.querySelector("#chat-log-wrapper");

  if (aiWrapper.style.display === "none") {
    aiWrapper.style.display = "block";
    chatLogWrapper.style.display = "none";
  } else {
    aiWrapper.style.display = "none";
    chatLogWrapper.style.display = "block";
  }
  setTimeout(() => {
    scrollToBottom(chatContainer);
  }, 100);
}

document.addEventListener("DOMContentLoaded", () => {
  const aiButton = document.querySelector("#ai-button");
  const closeButton = document.querySelector("#close-button");
  const aiWrapper = document.querySelector("#ai-wrapper");
  const chatLogWrapper = document.querySelector("#chat-log-wrapper");
  const chatContainer = document.getElementById("chat-container");

  aiButton.addEventListener("click", () => {
    aiWrapper.style.display = "none";
    chatLogWrapper.classList.remove("hidden"); 
    scrollToBottom(chatContainer); // この行を追加
  });

  closeButton.addEventListener("click", () => {
    aiWrapper.style.display = "block";
    chatLogWrapper.classList.add("hidden"); 
  });
});

//chat関連
function scrollToBottom(element) {
  element.scrollTop = element.scrollHeight;
}
function displayChatLog(input, output) {
  const chatContainer = document.getElementById("chat-container");
  const formContainer = document.getElementById("chat-form-container");

  const userChat = document.createElement("div");
  userChat.className = "chat chat-end";
  const userHeader = document.createElement("div");
  userHeader.className = "chat-header";
  userHeader.textContent = "User";
  const userInput = document.createElement("div");
  userInput.className = "chat-bubble chat-bubble-secondary text-xs";
  userInput.textContent = input;
  userChat.appendChild(userHeader);
  userChat.appendChild(userInput);
  chatContainer.appendChild(userChat);

  const apiChat = document.createElement("div");
  apiChat.className = "chat chat-start";
  const apiImage = document.createElement("div");
  apiImage.className = "chat-image";
  apiImage.innerHTML = `<%= image_tag("booknekosan.png", width: '50px', height: '50px') %>`;
  const apiHeader = document.createElement("div");
  apiHeader.className = "chat-header";
  apiHeader.textContent = "MidPlotAI";
  const apiOutput = document.createElement("div");
  apiOutput.className = "chat-bubble chat-bubble-secondary text-xs";
  apiOutput.textContent = output;
  apiChat.appendChild(apiImage);
  apiChat.appendChild(apiHeader);
  apiChat.appendChild(apiOutput);
  chatContainer.appendChild(apiChat);

  chatContainer.insertBefore(userChat, formContainer);
  chatContainer.insertBefore(apiChat, formContainer);

  scrollToBottom(chatContainer);
}

async function sendRequestAndDisplayResults(formId, paramName) {
  event.preventDefault();
  const query = document.getElementById(paramName).value;

  // APIリクエスト
  const response = await fetch("/chats/chat_emotional_value?" + paramName + "=" + encodeURIComponent(query));
  const jsonResponse = await response.json();
  const generatedText = jsonResponse.generated_text;

  // チャットログを表示
  displayChatLog(query, generatedText);
}

document.getElementById("synonym-form").addEventListener("submit", (event) => {
  sendRequestAndDisplayResults("synonym-form", "Synonym");
});

document.getElementById("emotional-value-form").addEventListener("submit", (event) => {
  sendRequestAndDisplayResults("emotional-value-form", "emotional_value");
});

// シークバーの制御
document.addEventListener("DOMContentLoaded", () => {
  const chatContainer = document.getElementById("chat-container");
  chatContainer.scrollTop = chatContainer.scrollHeight;
});

// 切り替え
function switchTabs(tabId) {
  const emotionalValueTab = document.getElementById("emotional-value-tab");
  const synonymTab = document.getElementById("synonym-tab");
  const emotionalValueForm = document.getElementById("emotional-value-form-container");
  const synonymForm = document.getElementById("synonym-form-container");

  if (tabId === "emotional-value-tab") {
    emotionalValueTab.classList.add("tab-active");
    synonymTab.classList.remove("tab-active");
    emotionalValueForm.classList.remove("hidden");
    synonymForm.classList.add("hidden");
  } else if (tabId === "synonym-tab") {
    emotionalValueTab.classList.remove("tab-active");
    synonymTab.classList.add("tab-active");
    emotionalValueForm.classList.add("hidden");
    synonymForm.classList.remove("hidden");
  }
}

document.getElementById("emotional-value-tab").addEventListener("click", () => {
  switchTabs("emotional-value-tab");
});

document.getElementById("synonym-tab").addEventListener("click", () => {
  switchTabs("synonym-tab");
});

</script>
<% end %>