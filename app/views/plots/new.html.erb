<%= render 'shared/login_check' %>
<%= render 'shared/flash_message' %>

<div class="bg-base-200 text-gray-700 <%= 'pb-52' if current_user.running? %>">
 <div class="flex border-b-4 border-base-300">
  <div class="flex-1 font-light mx-4 m-2 text-4xl drop-shadow-2xl"><%= link_to "プロットを作成する", new_plot_path, class: "text-3xl"  %></div>
  </div>
    <div class="mx-4">
      <%= form_with model: @plot, local: true do |f| %>
        <div class="flex flex-col">
          <%= f.label :プロットタイトル, class: 'my-1 text-xl' %>
            <p class="text-sm">作品のタイトルを決めましょう。</p>
            <p class="text-sm">思い浮かばない場合や後で決めたい場合は、仮プロットを作成することができます。</p>
          <%= f.text_field :name, class: 'my-1 input input-bordered input-secondary md:input-md input-lg w-full max-w-full'%>
          <%= f.label :テーマ, class: 'my-1 text-xl' %>
            <p class="text-sm">作品のテーマを設定し、伝えたいことは何かを考えましょう。</p>
          <%= f.text_field :theme, class: 'my-1 input input-bordered input-secondary md:input-md input-lg w-full max-w-full' %>
          <%= f.label :ログライン, class: 'my-1 text-xl' %>
            <p class="text-sm">作品のログライン（one line）を設定しましょう。</p>
            <p class="text-sm">ログラインとは、作品を一行で簡潔にまとめたものです。</p>
          <%= f.text_area :one_line, class: 'my-1 textarea textarea-secondary md:textarea-md textarea-lg w-full max-w-full h-24'%>
          <%= f.label :プロットカラー, class: 'my-1 text-xl' %>
            <p class="text-sm">プロットカードの色を選択できます。</p>
          <%= f.collection_select :color, Plot.colors.keys, :to_s, :to_s, { prompt: "Select a color" }, { class: "select select-secondary select-lg md:select-md font-light" } %>
          <%= f.label :作品の長さ, class: 'my-1 text-xl' %>
            <p class="text-sm">作品の長さを決めましょう。</p>
          <%= f.collection_select :length_type, Plot.length_types.keys, :to_s, :to_s,{}, { class: "select select-secondary select-lg md:select-md font-light" }  %>
          <%= f.label :作中時期, class: 'my-1 text-xl' %>
            <p class="text-sm">作品の開始時間を設定しましょう。ここで入力しておくとカード編集画面で全てに適応されます。</p>
          <%= f.datetime_field :timeline, class: 'select select-secondary select-lg md:select-md font-light' %>
          <%= f.label :基本人称, class: 'my-1 text-xl' %>
            <p class="text-sm">基本の人称を設定しましょう。ここで入力しておくとカード編集画面で全てに適応されます。</p>
          <%= f.collection_select :person, Plot.people.keys, :to_s, :to_s, { prompt: "三人称" }, { class: "select select-secondary select-lg md:select-md font-light" }  %>
          <%= f.submit 'プロットを作成する', class: 'btn text-gray-100 bg-gray-900 my-2' %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<%= render 'shared/footer' %>

<% if current_user.running? %>
<div class="fixed bg-base-100 shadow-xl bottom-0 m-8 z-20 h-52 sm:h-40 w-11/12 max-w-5xl border-2 rounded-lg border-stone-800">
  <div class="chat chat-start mt-2">
    <div class="chat-image">
      <%= image_tag("booknekosan.png", width: '120px', height: '120px', class: "bottom-0") %>
    </div>
    <div id="text", class="chat-bubble chat-bubble-secondary"></div>
  </div>
  <div class="-my-8 m-2 flex justify-end items-end">
    <%= button_to  'チュートリアルを終了する', complete_tutorial_path(current_user), class: "btn btn-sm m-2" , method: :patch %>
    <div id="increment-btn", class="btn btn-sm m-2">前へ</div>
    <div id="decrement-btn", class="btn btn-sm m-2">次へ</div>
  </div>
</div>

<script>
const incrementBtn = document.getElementById('increment-btn');
const decrementBtn = document.getElementById('decrement-btn');
const textDiv = document.getElementById('text');

const texts = [
  '説明に沿って、プロットタイトルやテーマなどを決めよう！',
  '今思い付かない部分は空白にしていも進めることはできるよ！'
];
let currentIndex = 0;

textDiv.textContent = texts[currentIndex];
updateButtonVisibility();

incrementBtn.addEventListener('click', () => {
  currentIndex = Math.max(currentIndex - 1, 0);
  textDiv.textContent = texts[currentIndex];
  updateButtonVisibility();
});

decrementBtn.addEventListener('click', () => {
  currentIndex = Math.min(currentIndex + 1, texts.length - 1);
  textDiv.textContent = texts[currentIndex];
  updateButtonVisibility();
});

function updateButtonVisibility() {
  if (currentIndex === 0) {
    incrementBtn.setAttribute('disabled', true);
    incrementBtn.classList.add('opacity-50', 'cursor-not-allowed');
  } else {
    incrementBtn.removeAttribute('disabled');
    incrementBtn.classList.remove('opacity-50', 'cursor-not-allowed');
  }

  if (currentIndex === texts.length - 1) {
    decrementBtn.setAttribute('disabled', true);
    decrementBtn.classList.add('opacity-50', 'cursor-not-allowed');
  } else {
    decrementBtn.removeAttribute('disabled');
    decrementBtn.classList.remove('opacity-50', 'cursor-not-allowed');
  }
}
</script>
<% end %>